using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Nemerle.Text;

namespace Mal
{
	public class Reader
	{
		public this(s : string)
		{
			tokens = Tokenizer(s);
		}

		mutable index = 0;
		mutable tokens : array[string];

		private static Tokenizer(source : string) : array[string]
		{
			def rx = "[\\s,]*(~@|[\\[\\]{}()'`~^@]|\"(?:\\\\.|[^\\\\\"])*\"|;.*|[^\\s\\[\\]{}('\"`,;)]*)";
			def m = Regex(rx).Matches(source);

			// copy matches to array of strings
			def result = array(m.Count);
			for (mutable i = 0; i < m.Count; i++) 
			{
				result[i] = m[i].Value.Trim()
			}

			result
		}

		private Next() : string
		{
			def i = index;
			index++;
			tokens[i];
		}

		private Skip(token : string) : void
		{
			def skipped = Next();
			when (skipped != token)
			{
				throw Exception("Expected " + token + ", got " + skipped);
			}
		}

		private Peek() : string
		{
			tokens[index];
		}

		private ReadAtom() : MalValue
		{
			def token = Next();
			regexp match (token)
			{
				| @"\d+" => MalValue.Integer(Convert.ToInt32(token))
				| @"[-+/*%=]" => MalValue.Symbol(token)
				| @"\w+" => MalValue.Atom(token)
				| _ => MalValue.Unknown(token)
			}
		}

		private ReadList() : MalValue
		{
			Skip("(");

			def result = List();
			def loop() : void
			{
				def token = Peek();
				match (token)
				{
					| ")" => Skip(")");
					| _ => result.Add(ReadForm()); loop()
				}
			}

			loop();
			MalValue.List(result)
		}

		public ReadForm() : MalValue
		{
			def token = Peek();
			match (token)
			{
				| "(" => ReadList()
				| _ => ReadAtom()
			}
		}

	}

	/*/ Test for Reader:
	class Program
	{
		// form reader
		static Main() : void
		{
			def src = "(+ 1 2 3 (* 6 (- (/ 14 7) 2) 8) 4 5)";
			def r = Reader(src);
			def form = r.ReadForm();

			def print(indent : string, form : object)
			{
				match (form)
				{
					| lst is MalValue.List =>
					{
						Console.Write(indent);
						Console.WriteLine("(");

						foreach (l in lst.list)
						{
							print(indent + " ", l);
						}

						Console.Write(indent);
						Console.WriteLine(")");
					}
					| integer is MalValue.Integer => 
					{
						Console.Write(indent);
						Console.WriteLine("{0} : int", integer.value);
					}
					| symbol is MalValue.Symbol =>
					{
						Console.Write(indent);
						Console.WriteLine("{0} : symbol", symbol.value);
					}
					| atom is MalValue.Atom =>
					{
						Console.Write(indent);
						Console.WriteLine("{0} : atom", atom.value);
					}
					| _ => {}
				}
			}

			Console.WriteLine(src);
			print("", form)
		}
	}//*/
}
